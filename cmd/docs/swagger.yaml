definitions:
  CreateVehicleRequest:
    description: Object that represents a vehicle
    properties:
      bodyType:
        maxLength: 30
        type: string
      brand:
        maxLength: 30
        type: string
      color:
        maxLength: 30
        type: string
      condition:
        enum:
        - new
        - used
        - demonstration
        type: string
      description:
        type: string
      doors:
        maximum: 5
        minimum: 2
        type: integer
      engine:
        type: string
      fuelType:
        maxLength: 30
        type: string
      hasAbsBrakes:
        type: boolean
      hasAirConditioning:
        type: boolean
      hasAirbag:
        type: boolean
      hasAlarm:
        type: boolean
      hasMultimedia:
        type: boolean
      hasParkingSensors:
        type: boolean
      hasPowerLocks:
        type: boolean
      hasPowerSteering:
        type: boolean
      hasPowerWindows:
        type: boolean
      hasRearCamera:
        type: boolean
      hasTractionControl:
        type: boolean
      mileage:
        minimum: 0
        type: integer
      model:
        maxLength: 30
        type: string
      price:
        minimum: 0
        type: number
      status:
        enum:
        - available
        - reserved
        - sold
        - maintenance
        type: string
      transmission:
        maxLength: 30
        type: string
      year:
        minimum: 1900
        type: integer
    required:
    - bodyType
    - brand
    - color
    - condition
    - doors
    - engine
    - fuelType
    - model
    - price
    - transmission
    - year
    type: object
  ErrorResponse:
    properties:
      details: {}
      error:
        type: string
      status:
        type: integer
    type: object
  PaginatedResponse-VehicleViewResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/VehicleViewResponse'
        type: array
      first:
        type: boolean
      last:
        type: boolean
      numberOfElements:
        type: integer
      pageNumber:
        type: integer
      pageSize:
        type: integer
      totalElements:
        type: integer
      totalPages:
        type: integer
    type: object
  SellVehicleRequest:
    description: Object that represents a sell
    properties:
      amount:
        type: number
      cpf:
        description: VehicleID string  `json:"vehicle_id" binding:"required"`
        type: string
    required:
    - amount
    - cpf
    type: object
  SuccessResponse:
    description: Object that represents a success response
    properties:
      data: {}
      message:
        type: string
      meta: {}
      status:
        type: integer
    type: object
  UpdateVehicleRequest:
    description: Object that represents a vehicle to update
    properties:
      color:
        type: string
      condition:
        type: string
      description:
        type: string
      has_abs_brakes:
        type: boolean
      has_air_conditioning:
        type: boolean
      has_airbag:
        type: boolean
      has_alarm:
        type: boolean
      has_multimedia:
        type: boolean
      has_parking_sensors:
        type: boolean
      has_power_locks:
        type: boolean
      has_power_steering:
        type: boolean
      has_power_windows:
        type: boolean
      has_rear_camera:
        type: boolean
      has_traction_control:
        type: boolean
      mileage:
        type: integer
      price:
        type: number
      status:
        type: string
    type: object
  VehicleResponse:
    description: Represents a vehicle
    properties:
      body_type:
        type: string
      brand:
        type: string
      color:
        type: string
      condition:
        type: string
      created_at:
        type: string
      description:
        type: string
      doors:
        type: integer
      engine:
        type: string
      fuel_type:
        type: string
      has_abs_brakes:
        type: boolean
      has_air_conditioning:
        type: boolean
      has_airbag:
        type: boolean
      has_alarm:
        type: boolean
      has_multimedia:
        type: boolean
      has_parking_sensors:
        type: boolean
      has_power_locks:
        type: boolean
      has_power_steering:
        type: boolean
      has_power_windows:
        type: boolean
      has_rear_camera:
        type: boolean
      has_traction_control:
        type: boolean
      id:
        type: string
      mileage:
        type: integer
      model:
        type: string
      price:
        type: number
      status:
        type: string
      transmission:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  VehicleViewResponse:
    description: basic Vehicle information
    properties:
      brand:
        type: string
      id:
        type: string
      mileage:
        type: integer
      model:
        type: string
      price:
        type: number
      year:
        type: integer
    type: object
info:
  contact:
    email: kalilventur@gmail.com
    name: API Support
    url: https://github.com/kalilventura/vehicle-management-service
  description: Vehicle Management Service.
  license:
    name: MIT License
    url: https://opensource.org/license/mit
  termsOfService: http://swagger.io/terms/
  title: Vehicle Management Service
  version: "1.0"
paths:
  /v1/vehicles:
    get:
      description: Retrieves a paginated list of vehicles. This endpoint supports
        filtering by brand, model, and status, as well as sorting and pagination.
      operationId: list-vehicles
      parameters:
      - description: Filter by vehicle brand (e.g., 'Ford')
        in: query
        name: brand
        type: string
      - description: Filter by vehicle model (e.g., 'Mustang')
        in: query
        name: model
        type: string
      - description: Filter by vehicle status
        enum:
        - available
        - sold
        in: query
        name: status
        type: string
      - default: createdAt
        description: Field to sort by
        enum:
        - price
        - year
        - createdAt
        in: query
        name: sortBy
        type: string
      - default: desc
        description: Sort order ('asc' or 'desc')
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A paginated list of vehicles that match the criteria
          schema:
            $ref: '#/definitions/PaginatedResponse-VehicleViewResponse'
        "400":
          description: Bad Request (e.g., invalid filter or pagination parameters)
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List and Filter Vehicles
      tags:
      - vehicles
    post:
      consumes:
      - application/json
      description: Adds a new vehicle to the database. The request body must contain
        all required vehicle details. Upon successful creation, the full vehicle object,
        including its server-generated unique ID, is returned.
      operationId: create-vehicle
      parameters:
      - description: Payload containing the new vehicle's data
        in: body
        name: vehicle
        required: true
        schema:
          $ref: '#/definitions/CreateVehicleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Vehicle created successfully
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/VehicleResponse'
              type: object
        "400":
          description: Bad Request (e.g., missing required fields or invalid data
            format)
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict (e.g., a vehicle with the same license plate already
            exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a New Vehicle
      tags:
      - vehicles
  /v1/vehicles/{id}:
    get:
      description: Fetches the details of a single vehicle from the database using
        its unique UUID.
      operationId: get-vehicle-by-id
      parameters:
      - description: The unique identifier (UUID) of the vehicle
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the vehicle data
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/VehicleResponse'
              type: object
        "404":
          description: The vehicle with the specified ID was not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve a Vehicle by ID
      tags:
      - vehicles
    patch:
      consumes:
      - application/json
      description: Partially updates the data for a specific vehicle. Only the fields
        provided in the JSON request body will be modified. All other fields will
        remain unchanged.
      operationId: update-vehicle-by-id
      parameters:
      - description: The unique identifier (UUID) of the vehicle to update
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Payload with the vehicle fields to be updated
        in: body
        name: vehicle
        required: true
        schema:
          $ref: '#/definitions/UpdateVehicleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Vehicle updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/VehicleResponse'
              type: object
        "400":
          description: Bad Request (e.g., invalid data format or validation error)
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: The vehicle with the specified ID was not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict (e.g., updating a unique field to a value that already
            exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update Vehicle Details (Partial)
      tags:
      - vehicles
  /v1/vehicles/{id}/sales:
    post:
      consumes:
      - application/json
      description: |-
        Processes and records the sale of an existing vehicle by its unique ID.
        Upon successful execution, this changes the vehicle's status to "sold".
        This operation is not idempotent; attempting to sell the same vehicle more than once will result in a conflict error.
      operationId: sell-vehicle-by-id
      parameters:
      - description: Vehicle ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Payload with sale details, such as buyer information and final
          price
        in: body
        name: sale
        required: true
        schema:
          $ref: '#/definitions/SellVehicleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Vehicle sale registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request (e.g., missing sale data or invalid format)
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Vehicle with the specified ID was not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: 'Conflict: The vehicle has already been sold'
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Sell a Vehicle
      tags:
      - vehicles
swagger: "2.0"
