// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/kalilventura/vehicle-management-service",
            "email": "kalilventur@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/license/mit"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/vehicles": {
            "get": {
                "description": "Retrieves a paginated list of vehicles. This endpoint supports filtering by brand, model, and status, as well as sorting and pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicles"
                ],
                "summary": "List and Filter Vehicles",
                "operationId": "list-vehicles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by vehicle brand (e.g., 'Ford')",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by vehicle model (e.g., 'Mustang')",
                        "name": "model",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "available",
                            "sold"
                        ],
                        "type": "string",
                        "description": "Filter by vehicle status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "price",
                            "year",
                            "createdAt"
                        ],
                        "type": "string",
                        "default": "createdAt",
                        "description": "Field to sort by",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order ('asc' or 'desc')",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of vehicles that match the criteria",
                        "schema": {
                            "$ref": "#/definitions/PaginatedResponse-VehicleViewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid filter or pagination parameters)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new vehicle to the database. The request body must contain all required vehicle details. Upon successful creation, the full vehicle object, including its server-generated unique ID, is returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicles"
                ],
                "summary": "Create a New Vehicle",
                "operationId": "create-vehicle",
                "parameters": [
                    {
                        "description": "Payload containing the new vehicle's data",
                        "name": "vehicle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateVehicleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vehicle created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/VehicleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., missing required fields or invalid data format)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., a vehicle with the same license plate already exists)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/vehicles/{id}": {
            "get": {
                "description": "Fetches the details of a single vehicle from the database using its unique UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicles"
                ],
                "summary": "Retrieve a Vehicle by ID",
                "operationId": "get-vehicle-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique identifier (UUID) of the vehicle",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the vehicle data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/VehicleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "The vehicle with the specified ID was not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially updates the data for a specific vehicle. Only the fields provided in the JSON request body will be modified. All other fields will remain unchanged.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicles"
                ],
                "summary": "Update Vehicle Details (Partial)",
                "operationId": "update-vehicle-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique identifier (UUID) of the vehicle to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload with the vehicle fields to be updated",
                        "name": "vehicle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateVehicleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicle updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/VehicleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid data format or validation error)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The vehicle with the specified ID was not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., updating a unique field to a value that already exists)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/vehicles/{id}/sales": {
            "post": {
                "description": "Processes and records the sale of an existing vehicle by its unique ID.\nUpon successful execution, this changes the vehicle's status to \"sold\".\nThis operation is not idempotent; attempting to sell the same vehicle more than once will result in a conflict error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicles"
                ],
                "summary": "Sell a Vehicle",
                "operationId": "sell-vehicle-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Vehicle ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload with sale details, such as buyer information and final price",
                        "name": "sale",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SellVehicleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vehicle sale registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., missing sale data or invalid format)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Vehicle with the specified ID was not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict: The vehicle has already been sold",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CreateVehicleRequest": {
            "description": "Object that represents a vehicle",
            "type": "object",
            "required": [
                "bodyType",
                "brand",
                "color",
                "condition",
                "doors",
                "engine",
                "fuelType",
                "model",
                "price",
                "transmission",
                "year"
            ],
            "properties": {
                "bodyType": {
                    "type": "string",
                    "maxLength": 30
                },
                "brand": {
                    "type": "string",
                    "maxLength": 30
                },
                "color": {
                    "type": "string",
                    "maxLength": 30
                },
                "condition": {
                    "type": "string",
                    "enum": [
                        "new",
                        "used",
                        "demonstration"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "doors": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 2
                },
                "engine": {
                    "type": "string"
                },
                "fuelType": {
                    "type": "string",
                    "maxLength": 30
                },
                "hasAbsBrakes": {
                    "type": "boolean"
                },
                "hasAirConditioning": {
                    "type": "boolean"
                },
                "hasAirbag": {
                    "type": "boolean"
                },
                "hasAlarm": {
                    "type": "boolean"
                },
                "hasMultimedia": {
                    "type": "boolean"
                },
                "hasParkingSensors": {
                    "type": "boolean"
                },
                "hasPowerLocks": {
                    "type": "boolean"
                },
                "hasPowerSteering": {
                    "type": "boolean"
                },
                "hasPowerWindows": {
                    "type": "boolean"
                },
                "hasRearCamera": {
                    "type": "boolean"
                },
                "hasTractionControl": {
                    "type": "boolean"
                },
                "mileage": {
                    "type": "integer",
                    "minimum": 0
                },
                "model": {
                    "type": "string",
                    "maxLength": 30
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "available",
                        "reserved",
                        "sold",
                        "maintenance"
                    ]
                },
                "transmission": {
                    "type": "string",
                    "maxLength": 30
                },
                "year": {
                    "type": "integer",
                    "minimum": 1900
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {},
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "PaginatedResponse-VehicleViewResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VehicleViewResponse"
                    }
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "numberOfElements": {
                    "type": "integer"
                },
                "pageNumber": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalElements": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "SellVehicleRequest": {
            "description": "Object that represents a sell",
            "type": "object",
            "required": [
                "amount",
                "cpf"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "cpf": {
                    "type": "string"
                }
            }
        },
        "SuccessResponse": {
            "description": "Object that represents a success response",
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "integer"
                }
            }
        },
        "UpdateVehicleRequest": {
            "description": "Object that represents a vehicle to update",
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "hasAbsBrakes": {
                    "type": "boolean"
                },
                "hasAirConditioning": {
                    "type": "boolean"
                },
                "hasAirbag": {
                    "type": "boolean"
                },
                "hasAlarm": {
                    "type": "boolean"
                },
                "hasMultimedia": {
                    "type": "boolean"
                },
                "hasParkingSensors": {
                    "type": "boolean"
                },
                "hasPowerLocks": {
                    "type": "boolean"
                },
                "hasPowerSteering": {
                    "type": "boolean"
                },
                "hasPowerWindows": {
                    "type": "boolean"
                },
                "hasRearCamera": {
                    "type": "boolean"
                },
                "hasTractionControl": {
                    "type": "boolean"
                },
                "mileage": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "VehicleResponse": {
            "description": "Represents a vehicle",
            "type": "object",
            "properties": {
                "bodyType": {
                    "type": "string"
                },
                "brand": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "doors": {
                    "type": "integer"
                },
                "engine": {
                    "type": "string"
                },
                "fuelType": {
                    "type": "string"
                },
                "hasAbsBrakes": {
                    "type": "boolean"
                },
                "hasAirConditioning": {
                    "type": "boolean"
                },
                "hasAirbag": {
                    "type": "boolean"
                },
                "hasAlarm": {
                    "type": "boolean"
                },
                "hasMultimedia": {
                    "type": "boolean"
                },
                "hasParkingSensors": {
                    "type": "boolean"
                },
                "hasPowerLocks": {
                    "type": "boolean"
                },
                "hasPowerSteering": {
                    "type": "boolean"
                },
                "hasPowerWindows": {
                    "type": "boolean"
                },
                "hasRearCamera": {
                    "type": "boolean"
                },
                "hasTractionControl": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "mileage": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "transmission": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "VehicleViewResponse": {
            "description": "basic Vehicle information",
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mileage": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "year": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Vehicle Management Service",
	Description:      "Vehicle Management Service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
