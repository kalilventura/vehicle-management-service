// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/kalilventura/vehicle-management/internal/shared/domain/entities"
	"github.com/kalilventura/vehicle-management/internal/shared/infrastructure/configuration"
	"github.com/kalilventura/vehicle-management/internal/shared/infrastructure/services"
	"github.com/kalilventura/vehicle-management/internal/vehicles"
	"github.com/kalilventura/vehicle-management/internal/vehicles/domain/commands"
	"github.com/kalilventura/vehicle-management/internal/vehicles/infrastructure/controllers"
	"github.com/kalilventura/vehicle-management/internal/vehicles/infrastructure/repositories"
	services2 "github.com/kalilventura/vehicle-management/internal/vehicles/infrastructure/services"
	"os"
	"strconv"
)

import (
	_ "github.com/kalilventura/vehicle-management/cmd/docs"
)

// Injectors from wire.go:

func InjectApp() *App {
	databaseSettings := injectDatabaseSettings()
	db := configuration.NewDatabaseClient(databaseSettings)
	gooseMigrationService := services.NewGooseMigrationService(db, databaseSettings)
	settings := InjectSettings()
	gormVehiclesRepository := repositories.NewGormVehiclesRepository(db)
	saveVehicleCommand := commands.NewSaveVehicleCommand(gormVehiclesRepository)
	saveVehicleController := controllers.NewSaveVehicleController(saveVehicleCommand)
	getVehicleByIDCommand := commands.NewGetVehicleByIDCommand(gormVehiclesRepository)
	getVehicleByIdController := controllers.NewGetVehicleByIdController(getVehicleByIDCommand)
	listVehiclesCommand := commands.NewListVehiclesCommand(gormVehiclesRepository)
	listVehiclesController := controllers.NewListVehiclesController(listVehiclesCommand)
	updateVehicleCommand := commands.NewUpdateVehicleCommand(gormVehiclesRepository)
	updateVehicleController := controllers.NewUpdateVehicleController(updateVehicleCommand)
	paymentsService := services2.NewPaymentsService(settings)
	sellVehicleCommand := commands.NewSellVehicleCommand(paymentsService, gormVehiclesRepository)
	sellVehicleController := controllers.NewSellVehicleController(sellVehicleCommand)
	module := vehicles.NewModule(saveVehicleController, getVehicleByIdController, listVehiclesController, updateVehicleController, sellVehicleController)
	v := newModules(module)
	app := NewApp(gooseMigrationService, settings, v)
	return app
}

// wire.go:

func InjectSettings() *entities.Settings {
	port, _ := strconv.Atoi(os.Getenv("PORT"))
	paymentsAPI := os.Getenv("PAYMENTS_API")

	return entities.NewSettings(port, paymentsAPI)
}

func injectDatabaseSettings() *entities.DatabaseSettings {
	host := os.Getenv("DB_HOST")
	name := os.Getenv("DB_NAME")
	port := os.Getenv("DB_PORT")
	user := os.Getenv("DB_USER")
	password := os.Getenv("DB_PASSWORD")
	dbSSL := os.Getenv("DB_SSL")
	return entities.NewDatabaseSettings(
		host,
		name,
		port,
		user,
		password,
		dbSSL,
	)
}

func newModules(vehiclesModule *vehicles.Module) []entities.HTTPModule {
	return []entities.HTTPModule{
		vehiclesModule,
	}
}
